# -*- coding: utf-8 -*-
"""
Created on Sat June 17 2023
@author: Zakaria Bouidane - Lokman Mihoubi
"""

import pickle
import streamlit as st
from streamlit_option_menu import option_menu

# Set page configuration
st.set_page_config(
    page_title="SmartDoc",
    page_icon=":stethoscope:",
    layout="centered",
    initial_sidebar_state="expanded"
)

# Loading the saved models
diabetes_model = pickle.load(open('diabetes_model.sav', 'rb'))
heart_disease_model = pickle.load(open('heart_disease_model.sav','rb'))

# Sidebar for navigation
with st.sidebar:
    selected = option_menu('SmartDoc: Syst√®me intelligent aidant au diagnostic des maladies',
                          ['Pr√©diction du diab√®te', 'Pr√©diction des maladies cardiaques'],
                          icons=['üíâ', '‚ù§Ô∏è'],
                          default_index=0)

# Page de pr√©diction du diab√®te
if selected == 'Pr√©diction du diab√®te':
    # Set page title and icon
    st.title('Diagnostic du diab√®te')
    st.markdown("üíâ Fournissez les informations n√©cessaires pour le diagnostic.")

    # Get user input data
    col1, col2, col3 = st.columns(3)

    with col1:
        Pregnancies = st.number_input('Nombre de grossesses', min_value=0, step=1)

    with col2:
        Glucose = st.number_input('Niveau de glucose', min_value=0.0, step=1.0)

    with col3:
        BloodPressure = st.number_input('Valeur de la pression art√©rielle', min_value=0.0, step=1.0)

    with col1:
        SkinThickness = st.number_input('√âpaisseur de la peau', min_value=0.0, step=1.0)

    with col2:
        Insulin = st.number_input('Niveau d\'insuline', min_value=0.0, step=1.0)

    with col3:
        BMI = st.number_input('Valeur de l\'IMC', min_value=0.0, step=0.1)

    with col1:
        DiabetesPedigreeFunction = st.number_input('Valeur de la fonction de pedigree du diab√®te', min_value=0.0, step=0.1)

    with col2:
        Age = st.number_input('√Çge de la personne', min_value=0, step=1)

    # Code de pr√©diction
    diab_diagnosis = ''

    # Create a button for prediction
    if st.button('R√©sultat du test de diab√®te'):
        diab_prediction = diabetes_model.predict([[Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin, BMI, DiabetesPedigreeFunction, Age]])

        if diab_prediction[0] == 1:
            diab_diagnosis = 'La personne est diab√©tique'
        else:
            diab_diagnosis = 'La personne n\'est pas diab√©tique'

    st.success(diab_diagnosis)


# Page de pr√©diction des maladies cardiaques
if selected == 'Pr√©diction des maladies cardiaques':
    # Set page title and icon
    st.title('Diagnostic des maladies cardiaques')
    st.markdown("‚ù§Ô∏è Fournissez les informations n√©cessaires pour le diagnostic.")

    col1, col2, col3 = st.columns(3)

    with col1:
        age = st.number_input('√Çge', min_value=0, step=1)

    with col2:
       sex = st.selectbox('Sexe', ['F√©minin', 'Masculin'], index=0)

    with col3:
        cp = st.number_input('Types de douleurs thoraciques', min_value=0, step=1)

    with col1:
        trestbps = st.number_input('Tension art√©rielle au repos', min_value=0.0, step=1.0)

    with col2:
        chol = st.number_input('Cholest√©rol', min_value=0.0, step=1.0)

    with col3:
        fbs = st.number_input('Taux de sucre dans le sang √† jeun', min_value=0.0, step=1.0)

    with col1:
        restecg = st.number_input('R√©sultats de l\'√©lectrocardiogramme au repos', min_value=0.0, step=1.0)

    with col2:
        thalach = st.number_input('Fr√©quence cardiaque maximale atteinte', min_value=0.0, step=1.0)

    with col3:
        exang = st.number_input('Angine induite par l\'effort', min_value=0.0, step=1.0)

    with col1:
        oldpeak = st.number_input('D√©pression ST induite par l\'effort', min_value=0.0, step=0.1)

    with col2:
        slope = st.number_input('Pente du segment ST d\'effort', min_value=0.0, step=0.1)

    with col3:
        ca = st.number_input('Nombre de vaisseaux principaux color√©s par fluoroscopie', min_value=0.0, step=1.0)

    with col1:
        thal_translation = {0: 'Normal', 1: 'D√©faut corrig√©', 2: 'D√©faut r√©versible'}
        thal_options = list(thal_translation.values())
        thal_text = st.selectbox('R√©sultats d\'un test sanguin appel√© test de thallium', thal_options)
        thal = list(thal_translation.keys())[list(thal_translation.values()).index(thal_text)]

    sex = 0 if sex == 'F√©minin' else 1
    # Code de pr√©diction
    heart_diagnosis = ''

    # Create a button for prediction
    if st.button('R√©sultat du test des maladies cardiaques'):
        # Convert input values to numeric types
        age = float(age)
        sex = float(sex)
        cp = float(cp)
        trestbps = float(trestbps)
        chol = float(chol)
        fbs = float(fbs)
        restecg = float(restecg)
        thalach = float(thalach)
        exang = float(exang)
        oldpeak = float(oldpeak)
        slope = float(slope)
        ca = float(ca)
        thal = float(thal)

        heart_prediction = heart_disease_model.predict([[age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal]])

        if heart_prediction[0] == 1:
            heart_diagnosis = 'La personne souffre d\'une maladie cardiaque'
        else:
            heart_diagnosis = 'La personne ne souffre d\'aucune maladie cardiaque'

    st.success(heart_diagnosis)
